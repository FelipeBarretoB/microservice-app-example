---
- name: Install Docker and Run Docker Compose
  hosts: app
  become: true

  tasks:
    - name: Update and install required packages
      apt:
        name: 
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present
        update_cache: yes

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Install Docker
      apt:
        name: 
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: true
    
    - name: Set Docker Compose download URL
      set_fact:
        docker_compose_url: "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-{{ ansible_system | lower }}-{{ ansible_architecture }}"

    - name: Install Docker Compose
      get_url:
        url: "{{ docker_compose_url }}"
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Copy docker-compose.yml to the target machine
      copy:
        src: ../docker-compose.yml
        dest: /home/{{ ansible_user }}/docker-compose.yml
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Copy todos-api directory to the target machine
      copy:
        src: ../todos-api
        dest: /home/{{ ansible_user }}/
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Copy auth-api directory to the target machine
      copy:
        src: ../auth-api
        dest: /home/{{ ansible_user }}/
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Copy users-api directory to the target machine
      copy:
        src: ../users-api
        dest: /home/{{ ansible_user }}/
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Copy frontend directory to the target machine
      copy:
        src: ../frontend
        dest: /home/{{ ansible_user }}/
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Copy log-message-processor directory to the target machine
      copy:
        src: ../log-message-processor
        dest: /home/{{ ansible_user }}/
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'


    - name: Run Docker Compose
      command: docker-compose up -d
      args:
        chdir: /home/{{ ansible_user }}

- name: Install Docker and Run sonar
  hosts: sonar
  become: true

  tasks:

  - name: Update the apt package index
    apt:
      update_cache: yes
  - name: Instalar dependencias de Docker
    apt:
      name:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
      state: present
      update_cache: yes

  - name: Agregar la clave GPG oficial de Docker
    ansible.builtin.apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Agregar el repositorio de Docker
    ansible.builtin.apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
      state: present

  - name: Instalar Docker CE
    apt:
      name: docker-ce
      state: present
      update_cache: yes

  - name: Create SonarQube network
    community.docker.docker_network:
      name: sonarnet
      driver: bridge

  - name: Create SonarQube volumes
    community.docker.docker_volume:
      name: "{{ item }}"
    loop:
      - sonarqube_conf
      - sonarqube_data
      - sonarqube_extensions
      - sonarqube_bundled-plugins
      - postgresql
      - postgresql_data

  - name: Run PostgreSQL container
    community.docker.docker_container:
        name: db
        image: postgres
        networks:
          - name: sonarnet
        env:
          POSTGRES_USER: sonar
          POSTGRES_PASSWORD: sonar
        volumes:
          - postgresql:/var/lib/postgresql
          - postgresql_data:/var/lib/postgresql/data
        restart_policy: always

  - name: Run SonarQube container
    community.docker.docker_container:
        name: sonarqube
        image: sonarqube
        ports:
          - "9000:9000"
        networks:
          - name: sonarnet
        env:
          SONARQUBE_JDBC_URL: "jdbc:postgresql://db:5432/sonar"
          SONARQUBE_JDBC_USERNAME: sonar
          SONARQUBE_JDBC_PASSWORD: sonar
        volumes:
          - sonarqube_conf:/opt/sonarqube/conf
          - sonarqube_data:/opt/sonarqube/data
          - sonarqube_extensions:/opt/sonarqube/extensions
          - sonarqube_bundled-plugins:/opt/sonarqube/lib/bundled-plugins
        restart_policy: always